# FlowTime-Sim Model Output Schema (YAML Schema Definition)
# DEPRECATED: This schema is obsolete as of M2.9. Use target-model-schema.yaml instead.
# M2.9 unified the schema - both Sim and Engine use binSize/binUnit format.
# This file will be removed after M2.9 implementation is complete.

$schema: "https://json-schema.org/draft-07/schema#"
$id: "https://flowtime.dev/schemas/sim-model-output.schema.yaml"
title: "FlowTime-Sim Model Output Schema (DEPRECATED)"
description: |
  DEPRECATED: Use target-model-schema.yaml instead.
  M2.9 unified the schema - FlowTime-Sim now outputs binSize/binUnit format directly.
  Both Sim and Engine use the same target-model-schema.yaml specification.

type: object
required:
  - grid
  - nodes

properties:
  schemaVersion:
    type: integer
    const: 1
    description: "Schema version identifier, always 1 for current version"

  grid:
    type: object
    description: "Time grid definition specifying simulation time parameters"
    required:
      - bins
      - binMinutes
    properties:
      bins:
        type: integer
        minimum: 1
        maximum: 8760
        description: "Number of time periods in the simulation"
        examples:
          - 24 # 24 hours
          - 168 # 1 week (hourly)
          - 8760 # 1 year (hourly)
      binMinutes:
        type: integer
        minimum: 1
        maximum: 1440
        description: "Duration of each time period in minutes"
        examples:
          - 1 # 1 minute bins
          - 5 # 5 minute bins
          - 15 # 15 minute bins (quarter hour)
          - 60 # 1 hour bins
          - 1440 # 1 day bins
    additionalProperties: false

  nodes:
    type: array
    description: "Array of computation nodes defining the model"
    minItems: 1
    items:
      type: object
      required:
        - id
        - kind
      properties:
        id:
          type: string
          pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$"
          description: "Unique node identifier, must be valid identifier"
          examples:
            - "demand"
            - "arrival_rate"
            - "served_customers"
        kind:
          type: string
          enum:
            - const
            - expr
            - pmf
          description: "Node type: constant values, expression, or probability mass function"

        # Properties for 'const' nodes
        values:
          type: array
          description: "Array of constant values (for const nodes only)"
          items:
            type: number
          minItems: 1
          examples:
            - [100, 120, 150, 130]
            - [50.5, 60.2, 70.8, 55.3]

        # Properties for 'expr' nodes
        expr:
          type: string
          description: |
            Expression formula (for expr nodes only).
            Supports: +, -, *, /, MIN(), MAX(), SHIFT(), and node ID references.
          examples:
            - "MIN(demand, capacity)"
            - "demand * 0.8"
            - "MAX(0, arrivals - served + SHIFT(backlog, 1))"

        # Properties for 'pmf' nodes
        pmf:
          type: object
          description: "Probability mass function definition (for pmf nodes only)"
          required:
            - values
            - probabilities
          properties:
            values:
              type: array
              description: "Possible values for the random variable"
              items:
                type: number
              minItems: 1
              examples:
                - [0, 1, 2, 3]
                - [50, 100, 150, 200]
            probabilities:
              type: array
              description: "Probability for each value (must sum to 1.0)"
              items:
                type: number
                minimum: 0
                maximum: 1
              minItems: 1
              examples:
                - [0.25, 0.25, 0.25, 0.25]
                - [0.1, 0.4, 0.4, 0.1]
          additionalProperties: false

      # Validation rules based on 'kind'
      allOf:
        # const nodes must have 'values', not 'expr' or 'pmf'
        - if:
            properties:
              kind:
                const: const
          then:
            required:
              - values
            not:
              anyOf:
                - required: [expr]
                - required: [pmf]

        # expr nodes must have 'expr', not 'values' or 'pmf'
        - if:
            properties:
              kind:
                const: expr
          then:
            required:
              - expr
            not:
              anyOf:
                - required: [values]
                - required: [pmf]

        # pmf nodes must have 'pmf', not 'values' or 'expr'
        - if:
            properties:
              kind:
                const: pmf
          then:
            required:
              - pmf
            not:
              anyOf:
                - required: [values]
                - required: [expr]

      additionalProperties: false

  outputs:
    type: array
    description: "Optional CSV output definitions (may be ignored by API mode)"
    items:
      type: object
      required:
        - series
        - as
      properties:
        series:
          type: string
          description: "Node ID to output"
          examples:
            - "demand"
            - "served"
            - "backlog"
        as:
          type: string
          pattern: "^[a-zA-Z0-9_-]+\\.csv$"
          description: "Output CSV filename"
          examples:
            - "demand.csv"
            - "served_customers.csv"
            - "results.csv"
      additionalProperties: false

  rng:
    type: object
    description: "Optional random number generator configuration (reserved for future use)"
    properties:
      kind:
        type: string
        description: "RNG algorithm name"
        examples:
          - "pcg32"
          - "mt19937"
      seed:
        type: integer
        description: "Random seed for reproducibility"
        minimum: 0
        examples:
          - 12345
          - 42
    additionalProperties: false

additionalProperties: false

# Example valid models
examples:
  - # Minimal model with constant and expression nodes
    schemaVersion: 1
    grid:
      bins: 4
      binSize: 1
  binUnit: hours
    nodes:
      - id: demand
        kind: const
        values: [100, 120, 150, 130]
      - id: served
        kind: expr
        expr: "demand * 0.8"

  - # Complete model with PMF node
    schemaVersion: 1
    grid:
      bins: 8
      binSize: 1
  binUnit: hours
    nodes:
      - id: demand
        kind: const
        values: [100, 120, 150, 180, 160, 140, 110, 100]
      - id: capacity
        kind: const
        values: [200, 200, 200, 200, 200, 200, 200, 200]
      - id: served
        kind: expr
        expr: "MIN(demand, capacity)"
      - id: failures
        kind: pmf
        pmf:
          values: [0, 1, 2]
          probabilities: [0.8, 0.15, 0.05]
    outputs:
      - series: served
        as: served.csv
      - series: failures
        as: failures.csv
    rng:
      kind: pcg32
      seed: 42

  - # Model with feedback loop using SHIFT
    schemaVersion: 1
    grid:
      bins: 24
      binSize: 1
  binUnit: hours
    nodes:
      - id: arrivals
        kind: const
        values:
          [
            50,
            30,
            20,
            15,
            10,
            15,
            25,
            45,
            80,
            120,
            150,
            180,
            200,
            190,
            170,
            160,
            140,
            110,
            90,
            75,
            65,
            60,
            55,
            50,
          ]
      - id: capacity
        kind: const
        values:
          [
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
            200,
          ]
      - id: served
        kind: expr
        expr: "MIN(arrivals, capacity)"
      - id: backlog
        kind: expr
        expr: "MAX(0, arrivals - served + SHIFT(backlog, 1))"
    outputs:
      - series: served
        as: served.csv
      - series: backlog
        as: backlog.csv

# Validation notes
notes:
  generation_process: |
    This schema represents the OUTPUT of FlowTime-Sim's GenerateEngineModelAsync() method.
    The generation process performs these transformations from template format:

    1. Parameter Substitution: Replace ${param} placeholders with values
    2. Grid Conversion: Convert binSize+binUnit to binMinutes
    3. Schema Cleanup:
       - Strip 'metadata' and 'parameters' sections
       - Rename 'expression' to 'expr'
       - Rename 'source'/'filename' to 'series'/'as' in outputs
       - Remove 'dependencies' arrays from nodes
       - Remove 'id' fields from outputs
       - Ensure 'schemaVersion' is present

  validation_rules: |
    Additional validation performed by FlowTime Engine:
    - Node IDs must be unique across all nodes
    - Expression node references must point to existing node IDs
    - No circular dependencies (except through SHIFT function)
    - Const node values array length must equal grid.bins
    - PMF probabilities must sum to 1.0 (within floating-point tolerance)
    - Output series must reference existing node IDs

  field_differences_from_template: |
    Template Field              → Output Field
    -------------------------------------------
    metadata.*                  → (removed)
    parameters.*                → (removed)
    grid.binSize + grid.binUnit → grid.binMinutes
    nodes[].expression          → nodes[].expr
    nodes[].dependencies        → (removed)
    outputs[].id                → (removed)
    outputs[].source            → outputs[].series
    outputs[].filename          → outputs[].as
    outputs[].description       → (removed)
    (none)                      → schemaVersion (added)
    rng.*                       → rng.* (unchanged)
