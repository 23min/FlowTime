@page "/api-demo"
@using FlowTime.UI.Services
@using MudBlazor
@inject IFlowTimeApiClient Api
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>API Demo</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">API Demo</MudText>
<MudText Class="mb-1">Interact with FlowTime API using the typed client.</MudText>
<MudText Typo="Typo.caption" Class="mb-4" Style="font-family:monospace">API Base: @(Api.BaseAddress ?? "(null)")
</MudText>

@if (anyLoading)
{
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mb-3" />
}

<MudPaper Class="pa-4 mb-4" Elevation="1">
    <MudStack Row="true" Spacing="2">
        <MudButton Variant="Variant.Filled" Class="action-btn" Color="@HealthButtonColor" OnClick="CheckHealth" Disabled="@healthLoading">
            @if (healthLoading)
            {
                <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
            }
            @HealthButtonLabel
        </MudButton>
    @if (healthOutcome == Outcome.Success && health is not null)
        {
            <MudChip T="string" Color="Color.Success" Variant="Variant.Filled">ok</MudChip>
        }
    else if (healthOutcome == Outcome.Failed)
        {
            <MudChip T="string" Color="Color.Error" Variant="Variant.Filled">failed</MudChip>
        }
    </MudStack>
</MudPaper>

<MudPaper Class="pa-4 mb-4" Elevation="1">
    <MudText Typo="Typo.h6" Class="mb-2">Sample YAML</MudText>
    <MudPaper Class="pa-2 code-block" Elevation="0">@sampleYaml</MudPaper>
    <MudStack Row="true" Spacing="2" Class="mt-3">
    <MudButton Variant="Variant.Filled" Class="action-btn" Color="@RunButtonColor" OnClick="RunModel" Disabled="@runLoading">
    @if (runLoading) { <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" /> }
        @RunButtonLabel
    </MudButton>
    <MudButton Variant="Variant.Outlined" Class="action-btn" Color="@GraphButtonColor" OnClick="GraphModel" Disabled="@graphLoading">
    @if (graphLoading) { <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" /> }
        @GraphButtonLabel
    </MudButton>
    </MudStack>
</MudPaper>

<MudExpansionPanels MultiExpansion="true">
    @if (runResult is not null)
    {
        <MudExpansionPanel Text="Run Result (series)" Expanded="true">
            <MudText Typo="Typo.subtitle2" Class="mb-2">Order: @string.Join(", ", runResult.Order)</MudText>
            <MudTable T="KeyValuePair<string, double[]>" Items="runResult.Series" Dense="true" Hover="true" Bordered="true"
                Striped="true" Elevation="0">
                <HeaderContent>
                    <MudTh>Series</MudTh>
                    <MudTh>Values</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Series">@context.Key</MudTd>
                    <MudTd DataLabel="Values">@string.Join(", ", context.Value)</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>
    }
    @if (graphResult is not null)
    {
        <MudExpansionPanel Text="Graph Result (edges)" Expanded="@(!(runResult is null))">
            <MudTable Dense="true" Hover="true" Items="graphResult.Edges">
                <HeaderContent>
                    <MudTh>Node</MudTh>
                    <MudTh>Inputs</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Node">@context.Id</MudTd>
                    <MudTd DataLabel="Inputs">@string.Join(", ", context.Inputs)</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>
    }
</MudExpansionPanels>

@code {
    private bool healthLoading, runLoading, graphLoading;
    private HealthResponse? health;
    private RunResponse? runResult;
    private GraphResponse? graphResult;
    private string? lastError;
    // No auto health probe; user initiated only per requirements.

    private enum ReqState { Idle, Loading }
    private enum Outcome { None, Success, Failed }
    private ReqState healthState = ReqState.Idle;
    private ReqState runState = ReqState.Idle;
    private ReqState graphState = ReqState.Idle;
    private Outcome healthOutcome = Outcome.None; // still used for health chip

    // Working sample YAML (two-space indentation, matches examples/hello/model.yaml)
    private const string sampleYaml =
        "grid:\n" +
        "  bins: 8\n" +
        "  binMinutes: 60\n" +
        "nodes:\n" +
        "  - id: demand\n" +
        "    kind: const\n" +
        "    values: [10,10,10,10,10,10,10,10]\n" +
        "  - id: served\n" +
        "    kind: expr\n" +
        "    expr: \"demand * 0.8\"\n" +
        "outputs:\n" +
        "  - series: served\n" +
        "    as: served.csv\n";

    private async Task CheckHealth()
    {
        healthLoading = true;
        healthState = ReqState.Loading;
        lastError = null;
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(8));
            var res = await Api.HealthAsync(cts.Token);
            if (res.Success)
            {
                health = res.Value;
                healthOutcome = Outcome.Success;
            }
            else
            {
                health = null;
                lastError = $"Health failed ({res.StatusCode}): {res.Error}";
                healthOutcome = Outcome.Failed;
                Snackbar.Add(lastError, Severity.Error);
            }
        }
        catch
        {
            healthOutcome = Outcome.Failed;
            lastError = "Health request error (offline)";
            Snackbar.Add(lastError, Severity.Error);
        }
        finally { healthLoading = false; healthState = ReqState.Idle; await InvokeAsync(StateHasChanged); }
    }

    // Removed OnAfterRender auto health + sample pre-population.

    private async Task RunModel()
    {
        runLoading = true;
        runState = ReqState.Loading;
        lastError = null;
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(12));
            var res = await Api.RunAsync(sampleYaml, cts.Token);
            if (res.Success)
            {
                runResult = res.Value;
                // success outcome only reflected via results presence; no chip for run
            }
            else
            {
                runResult = null;
                lastError = $"Run failed ({res.StatusCode}): {res.Error}";
                // failure; no chip, error via snackbar
                Snackbar.Add(lastError, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            runResult = null;
            // failure; no chip
            lastError = $"Run error: {ex.Message}";
            Snackbar.Add(lastError, Severity.Error);
        }
        finally { runLoading = false; runState = ReqState.Idle; await InvokeAsync(StateHasChanged); }
    }

    private async Task GraphModel()
    {
        graphLoading = true;
        graphState = ReqState.Loading;
        lastError = null;
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(12));
            var res = await Api.GraphAsync(sampleYaml, cts.Token);
            if (res.Success)
            {
                graphResult = res.Value;
                // success outcome only reflected via results presence
            }
            else
            {
                graphResult = null;
                lastError = $"Graph failed ({res.StatusCode}): {res.Error}";
                // failure outcome; no chip
                Snackbar.Add(lastError, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            graphResult = null;
            // failure outcome
            lastError = $"Graph error: {ex.Message}";
            Snackbar.Add(lastError, Severity.Error);
        }
        finally { graphLoading = false; graphState = ReqState.Idle; await InvokeAsync(StateHasChanged); }
    }

    // Removed sample JSON fallback loaders.

    private string HealthButtonLabel => healthState == ReqState.Loading ? "Checking..." : "Check Health";
    private Color HealthButtonColor => Color.Primary; // always neutral color
    private string RunButtonLabel => runState == ReqState.Loading ? "Running..." : "Run /run";
    private Color RunButtonColor => Color.Secondary; // always neutral
    private string GraphButtonLabel => graphState == ReqState.Loading ? "Loading..." : "Graph /graph";
    private Color GraphButtonColor => Color.Secondary; // always neutral

    private bool anyLoading => healthState == ReqState.Loading || runState == ReqState.Loading || graphState == ReqState.Loading;

}
