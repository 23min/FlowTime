@page "/nodes"
@using FlowTime.UI.Data
@using MudBlazor
@inject NavigationManager Nav

<PageTitle>Nodes</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Node Catalog</MudText>
<MudText Class="mb-4">M0 available & planned node kinds.</MudText>

<MudPaper Class="pa-4 mb-4" Elevation="1">
    <MudTextField @bind-Value="_search" Placeholder="Filter nodes..." Immediate="true" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" />
    <MudTable Dense="true" Hover="true" Filter="Filter" Items="NodeCatalog.All">
        <HeaderContent>
            <MudTh>Kind</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Example</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Kind">@context.Kind</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Status">
                <MudChip T="string" Color="@(context.Status == NodeStatus.Implemented ? Color.Success : Color.Warning)" Variant="Variant.Filled" Size="Size.Small">@context.Status</MudChip>
            </MudTd>
            <MudTd DataLabel="Example">@context.ExampleExpr</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

<MudExpansionPanels Elevation="1">
    @foreach (var n in NodeCatalog.All.Where(MatchesSearch))
    {
        <MudExpansionPanel Text="@n.Kind" Disabled="false">
            <MudText Typo="Typo.subtitle1" Class="mb-2">@n.Title</MudText>
            <MudText Class="mb-2">@n.Description</MudText>
            <MudStack Row="true" Spacing="1" Class="mb-2">
                <MudChip T="string" Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small">Inputs: @n.Inputs</MudChip>
                <MudChip T="string" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">Output: @n.Output</MudChip>
                <MudChip T="string" Variant="Variant.Filled" Color="@(n.Status == NodeStatus.Implemented ? Color.Success : Color.Warning)" Size="Size.Small">@n.Status</MudChip>
            </MudStack>
            @if (!string.IsNullOrWhiteSpace(n.ExampleExpr))
            {
                <MudPaper Class="pa-2" Elevation="0"><pre style="margin:0; font-size:.85rem;">@n.ExampleExpr</pre></MudPaper>
            }
            @if (!string.IsNullOrWhiteSpace(n.Notes))
            {
                <MudAlert Severity="Severity.Info" Elevation="0">@n.Notes</MudAlert>
            }
        </MudExpansionPanel>
    }
</MudExpansionPanels>

@code {
    private string _search = string.Empty;

    private bool Filter(NodeMetadata node) => MatchesSearch(node);
    private bool MatchesSearch(NodeMetadata node)
    {
        if (string.IsNullOrWhiteSpace(_search)) return true;
        var s = _search.Trim().ToLowerInvariant();
        return node.Kind.ToLowerInvariant().Contains(s) ||
               node.Title.ToLowerInvariant().Contains(s) ||
               node.Description.ToLowerInvariant().Contains(s) ||
               (node.ExampleExpr?.ToLowerInvariant().Contains(s) ?? false);
    }
}
