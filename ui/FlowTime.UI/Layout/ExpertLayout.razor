@inherits LayoutComponentBase
@using MudBlazor
@using FlowTime.UI.Configuration
@implements IDisposable
@inject FlowTime.UI.Services.ThemeService Theme
@inject FlowTime.UI.Services.PreferencesService Prefs
@inject FlowTime.UI.Services.FeatureFlagService Flags

<MudThemeProvider Theme="@Theme.CurrentTheme" IsDarkMode="@Theme.IsDark" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Default" Class="appbar-surface" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
            OnClick="ToggleDrawer" />
        <MudText Typo="Typo.h6">FlowTime</MudText>
        <MudSpacer />
        
        <!-- API Status LEDs -->
        <MudTooltip Text="FlowTime API Status">
            <MudIcon Icon="@Icons.Material.Filled.Circle" 
                     Color="@GetApiStatusColor(flowTimeApiStatus)" 
                     Size="Size.Small" 
                     Class="mr-1" />
        </MudTooltip>
        <MudTooltip Text="FlowTime-Sim API Status">
            <MudIcon Icon="@Icons.Material.Filled.Circle" 
                     Color="@GetApiStatusColor(flowTimeSimApiStatus)" 
                     Size="Size.Small" 
                     Class="mr-3" />
        </MudTooltip>
        
        <!-- API/Sim Mode Toggle -->
        <div class="d-flex align-center pa-2 mr-2" style="border-left: 1px solid var(--mud-palette-divider); border-right: 1px solid var(--mud-palette-divider);">
            <span class="mud-typography-caption mr-2">Mode:</span>
            <MudChip T="string" Color="@(useDemoMode? Color.Warning: Color.Success)" Variant="Variant.Text"
                Size="Size.Small" Class="mr-1">@(useDemoMode ? "Demo" : "API")</MudChip>
            <MudSwitch T="bool" Value="useDemoMode" ValueChanged="OnDemoModeChanged" Color="Color.Primary" Size="Size.Small" />
        </div>
        
        <!-- Switch to Learning Mode -->
        <MudTooltip Text="Need help getting started?">
            <MudButton Variant="Variant.Text" 
                      StartIcon="@Icons.Material.Filled.School"
                      Href="/learn"
                      Color="Color.Inherit"
                      Size="Size.Small">
                Learning Mode
            </MudButton>
        </MudTooltip>
        <MudIconButton Icon="@(Theme.IsDark? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
            Color="Color.Inherit" OnClick="ToggleDarkAsync" />
        
        <MudTooltip Text="View on GitHub">
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" 
                          Color="Color.Inherit" 
                          Href="https://github.com/23min/flowtime"
                          Target="_blank" />
        </MudTooltip>
    </MudAppBar>

        <MudDrawer @bind-Open="_drawerOpen" 
               ClipMode="DrawerClipMode.Always" 
               Elevation="2"
               Variant="DrawerVariant.Mini"
               OpenMiniOnHover="true"
               Width="280px"
               Class="drawer-surface">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Expert Console</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="/" Icon="@Icons.Material.Filled.Home" Match="NavLinkMatch.All">Home</MudNavLink>
            
            <!-- ANALYZE Section -->
            <MudNavLink Href="/analyze" Icon="@Icons.Material.Filled.Analytics" Class="nav-section-header">
                ANALYZE
            </MudNavLink>
            <MudNavLink Href="/nodes" Icon="@Icons.Material.Filled.AccountTree" Class="nav-submenu ps-6">
                Node Explorer
            </MudNavLink>
            <MudNavLink Href="/api-demo" Icon="@Icons.Material.Filled.Api" Class="nav-submenu ps-6">
                API Testing
            </MudNavLink>
            
            <!-- SIMULATE Section -->
            <MudNavLink Href="/simulate" Icon="@Icons.Material.Filled.ShowChart" Class="nav-section-header">
                SIMULATE
            </MudNavLink>
            <MudNavLink Href="/templates" Icon="@Icons.Material.Filled.PlayArrow" Class="nav-submenu ps-6">
                Template Studio
            </MudNavLink>
            
            <!-- TOOLS Section -->
            <MudNavLink Href="/tools" Icon="@Icons.Material.Filled.Build" Class="nav-section-header">
                TOOLS
            </MudNavLink>
            <MudNavLink Href="/health" Icon="@Icons.Material.Filled.HealthAndSafety" Class="nav-submenu ps-6">
                System Health
            </MudNavLink>
            
            <MudDivider Class="my-2" />
            
            <!-- LEARN Section -->
            <MudNavLink Href="/learn" Icon="@Icons.Material.Filled.MenuBook" Class="nav-section-header">
                LEARN
            </MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent Class="expert-main-content">
        <MudContainer MaxWidth="MaxWidth.False" Class="pa-4 main-container">
            @Body
        </MudContainer>
    </MudMainContent>
    
    <!-- Expert Status Bar -->
    <FlowTime.UI.Components.StatusBar.ExpertStatusBar 
        NodeCount="@currentNodeCount"
        ApiStatusText="@GetApiStatusText()"
        PerformanceText="@GetPerformanceText()" />
</MudLayout>

<style>
.expert-main-content {
    padding-bottom: 32px; /* Make room for status bar */
}

.drawer-surface {
    height: calc(100vh - 64px - 32px); /* Account for app bar and status bar */
}
</style>

@code {
    private bool _drawerOpen = true;
    private bool useDemoMode;
    
    // API Status tracking
    public enum ApiStatus { Unknown, Healthy, Unhealthy }
    private ApiStatus flowTimeApiStatus = ApiStatus.Unknown;
    private ApiStatus flowTimeSimApiStatus = ApiStatus.Unknown;
    
    // Status bar data
    private int currentNodeCount = 0;
    private DateTime lastHealthCheck = DateTime.MinValue;
    
    void ToggleDrawer() => _drawerOpen = !_drawerOpen;
    [Inject] IJSRuntime JS { get; set; } = default!;
    [Inject] IConfiguration Configuration { get; set; } = default!;
    async Task ToggleDarkAsync()
    {
        await Theme.EnsureLoadedAsync();
        await Theme.ToggleAsync();
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(Flags.EnsureLoadedAsync(), Theme.EnsureLoadedAsync(), Prefs.EnsureLoadedAsync());
        useDemoMode = Flags.UseDemoMode;
        Flags.Changed += OnFlagsChanged;
        
        // Start periodic health checks
        _ = Task.Run(PeriodicHealthCheck);
    }
    private async void OnFlagsChanged()
    {
        useDemoMode = Flags.UseDemoMode;
        await InvokeAsync(StateHasChanged);
    }
    private async Task OnDemoModeChanged(bool value)
    {
        await Flags.SetDemoModeAsync(value);
    }
    
    private Color GetApiStatusColor(ApiStatus status)
    {
        return status switch
        {
            ApiStatus.Healthy => Color.Success,
            ApiStatus.Unhealthy => Color.Error,
            _ => Color.Default
        };
    }
    
    private async Task PeriodicHealthCheck()
    {
        while (true)
        {
            try
            {
                // Simple health check - could be enhanced to use actual API clients
                using var httpClient = new HttpClient();
                httpClient.Timeout = TimeSpan.FromSeconds(5);
                
                // Get configuration for API URLs
                var flowTimeApiConfig = Configuration.GetSection(FlowTimeApiOptions.SectionName).Get<FlowTimeApiOptions>() 
                    ?? new FlowTimeApiOptions();
                var flowTimeSimApiConfig = Configuration.GetSection(FlowTimeSimApiOptions.SectionName).Get<FlowTimeSimApiOptions>() 
                    ?? new FlowTimeSimApiOptions();
                
                // Check FlowTime API using configured URL
                try
                {
                    var apiHealthUrl = $"{flowTimeApiConfig.BaseUrl.TrimEnd('/')}/{flowTimeApiConfig.ApiVersion}/healthz";
                    var response = await httpClient.GetAsync(apiHealthUrl);
                    flowTimeApiStatus = response.IsSuccessStatusCode ? ApiStatus.Healthy : ApiStatus.Unhealthy;
                }
                catch
                {
                    flowTimeApiStatus = ApiStatus.Unhealthy;
                }
                
                // Check FlowTime-Sim API using configured URL
                try
                {
                    var simApiHealthUrl = $"{flowTimeSimApiConfig.BaseUrl.TrimEnd('/')}/{flowTimeSimApiConfig.ApiVersion}/healthz";
                    var response = await httpClient.GetAsync(simApiHealthUrl);
                    flowTimeSimApiStatus = response.IsSuccessStatusCode ? ApiStatus.Healthy : ApiStatus.Unhealthy;
                }
                catch
                {
                    flowTimeSimApiStatus = ApiStatus.Unhealthy;
                }
                
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Health check error: {ex.Message}");
            }
            
            // Check every 30 seconds
            await Task.Delay(30000);
            lastHealthCheck = DateTime.Now;
        }
    }
    
    // Status bar data providers
    private string GetApiStatusText()
    {
        if (flowTimeApiStatus == ApiStatus.Healthy)
            return "Healthy";
        else if (flowTimeApiStatus == ApiStatus.Unhealthy)
            return "Unhealthy";
        else
            return "Unknown";
    }
    
    private string GetPerformanceText()
    {
        var timeSinceHealthCheck = DateTime.Now - lastHealthCheck;
        if (timeSinceHealthCheck.TotalMinutes < 1)
            return "Ready";
        else if (timeSinceHealthCheck.TotalMinutes < 5)
            return "Idle";
        else
            return "Stale";
    }
    
    public void Dispose() => Flags.Changed -= OnFlagsChanged;
}
