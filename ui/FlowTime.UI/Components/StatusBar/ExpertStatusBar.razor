@using MudBlazor
@using FlowTime.UI.Services
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject ThemeService Theme

<div class="expert-status-bar" style="background-color: @GetStatusBarBackgroundColor()">
    <!-- Left side: Reserved for user actions, modeling status -->
    
    <MudSpacer />
    
    <!-- Right side: Mode, API Status, Notifications -->
    <div class="status-bar-section">
        <!-- Mode Toggle -->
        <span class="mud-typography-caption mr-2">Mode:</span>
        <MudChip T="string" Color="@(UseDemoMode ? Color.Warning : Color.Success)" 
                 Variant="Variant.Filled" Size="Size.Small" Class="mr-1 compact-chip white-bg-chip">
            @(UseDemoMode ? "Demo" : "API")
        </MudChip>
        <MudSwitch T="bool" Value="UseDemoMode" ValueChanged="OnDemoModeChanged" 
                   Color="Color.Primary" Size="Size.Small" Class="mr-3" />
    </div>
    
    <div class="status-bar-section">
        <!-- API Status LEDs -->
        <MudTooltip Text="FlowTime API">
            <MudIcon Icon="@Icons.Material.Filled.Circle" 
                     Color="@FlowTimeApiColor" 
                     Class="mr-1 small-led" />
        </MudTooltip>
        <MudText Typo="Typo.caption" Class="mr-2">Engine</MudText>
        
        <MudTooltip Text="FlowTime-Sim API">
            <MudIcon Icon="@Icons.Material.Filled.Circle" 
                     Color="@FlowTimeSimApiColor" 
                     Class="mr-1 small-led" />
        </MudTooltip>
        <MudText Typo="Typo.caption" Class="mr-3">Sim</MudText>
    </div>
    
    <div class="status-bar-section">
        <!-- Notifications - Far Right -->
        <MudIconButton Icon="@GetNotificationIcon()" 
                      Color="@GetNotificationColor()" 
                      Size="Size.Small" 
                      OnClick="ShowNotifications"
                      Class="notification-button white-icon" />
    </div>
</div>

<!-- Simple notification popup for testing -->
@if (showNotificationPopup)
{
    <div class="notification-popup">
        <div class="notification-popup-header">
            <span>Notifications (@notifications.Count)</span>
            <button @onclick="ShowNotifications" class="close-btn">×</button>
        </div>
        <div class="notification-popup-content">
            @if (!notifications.Any())
            {
                <div class="notification-item">No notifications</div>
            }
            else
            {
                @foreach (var notification in notifications.OrderByDescending(n => n.Timestamp))
                {
                    <div class="notification-item @GetSeverityClass(notification.Severity)">
                        <div class="notification-icon">@GetSeverityIcon(notification.Severity)</div>
                        <div class="notification-content">
                            <div class="notification-message">@notification.Message</div>
                            <div class="notification-time">@notification.Timestamp.ToString("HH:mm:ss")</div>
                        </div>
                    </div>
                }
            }
        </div>
        @if (notifications.Any())
        {
            <div class="notification-popup-footer">
                <button @onclick="ClearNotifications" class="clear-btn">Clear All</button>
            </div>
        }
    </div>
}



@code {
    // Parameters
    [Parameter] public bool UseDemoMode { get; set; }
    [Parameter] public EventCallback<bool> OnDemoModeChanged { get; set; }
    [Parameter] public Color FlowTimeApiColor { get; set; } = Color.Default;
    [Parameter] public Color FlowTimeSimApiColor { get; set; } = Color.Default;
    
    // Notification system
    private readonly List<NotificationItem> notifications = new();
    
    // Notification model
    public class NotificationItem
    {
        public string Message { get; set; } = "";
        public NotificationSeverity Severity { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }
    
    public enum NotificationSeverity
    {
        Info,
        Warning,
        Error
    }
    
    // Public methods for adding notifications
    public void AddNotification(string message, NotificationSeverity severity = NotificationSeverity.Info)
    {
        notifications.Add(new NotificationItem 
        { 
            Message = message, 
            Severity = severity 
        });
        
        // Keep only last 20 notifications
        if (notifications.Count > 20)
        {
            notifications.RemoveAt(0);
        }
        
        InvokeAsync(StateHasChanged);
    }
    
    private bool showNotificationPopup = false;
    
    private void ShowNotifications()
    {
        showNotificationPopup = !showNotificationPopup;
    }
    
    protected override void OnInitialized()
    {
        // Notifications will be populated by the NotificationService as errors/warnings occur
    }
    

    
    private string GetNotificationIcon()
    {
        // Active alarm bell when there are notifications, normal when none
        return notifications.Any() 
            ? Icons.Material.Filled.NotificationsActive 
            : Icons.Material.Filled.Notifications;
    }
    
    private Color GetNotificationColor()
    {
        if (notifications.Any(n => n.Severity == NotificationSeverity.Error))
            return Color.Error;
        else if (notifications.Any(n => n.Severity == NotificationSeverity.Warning))
            return Color.Warning;
        else
            return Color.Default;
    }
    

    
    private string GetSeverityClass(NotificationSeverity severity)
    {
        return severity switch
        {
            NotificationSeverity.Error => "error",
            NotificationSeverity.Warning => "warning",
            _ => "info"
        };
    }
    
    private string GetSeverityIcon(NotificationSeverity severity)
    {
        return severity switch
        {
            NotificationSeverity.Error => "⚠️",
            NotificationSeverity.Warning => "⚠️",
            _ => "ℹ️"
        };
    }
    
    private void ClearNotifications()
    {
        notifications.Clear();
        showNotificationPopup = false;
        StateHasChanged();
    }
    
    private string GetStatusBarBackgroundColor()
    {
        if (UseDemoMode)
        {
            return "#FF8C00"; // Orange for demo mode
        }
        return Theme.IsDark ? "var(--mud-palette-background)" : "var(--mud-palette-info)";
    }

}