@using FlowTime.UI.Services
@inject ISimResultsService SimResults
@inject ISnackbar Snackbar

<MudStack Spacing="4">
    @if (Result != null)
    {
        <MudCard Outlined="true">
            <MudCardContent>
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
                    <MudText Typo="Typo.h6">Simulation Results</MudText>
                    <MudChip T="string" Color="@GetStatusColor(Result.Status)" Size="Size.Small">
                        @Result.Status.ToUpperInvariant()
                    </MudChip>
                </MudStack>
                
                <MudGrid>
                    <MudItem xs="12" sm="6" md="3">
                        <MudText Typo="Typo.caption">Run ID</MudText>
                        <MudText Typo="Typo.body2" Class="font-weight-bold">@Result.RunId</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudText Typo="Typo.caption">Duration</MudText>
                        <MudText Typo="Typo.body2" Class="font-weight-bold">
                            @(Result.EndTime?.Subtract(Result.StartTime).TotalSeconds.ToString("F1") ?? "N/A") seconds
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudText Typo="Typo.caption">Started</MudText>
                        <MudText Typo="Typo.body2" Class="font-weight-bold">
                            @Result.StartTime.ToString("HH:mm:ss")
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudText Typo="Typo.caption">Completed</MudText>
                        <MudText Typo="Typo.body2" Class="font-weight-bold">
                            @(Result.EndTime?.ToString("HH:mm:ss") ?? "N/A")
                        </MudText>
                    </MudItem>
                </MudGrid>

                @if (!string.IsNullOrEmpty(Result.ErrorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-3">
                        <MudText Typo="Typo.subtitle2">Error</MudText>
                        <MudText Typo="Typo.body2">@Result.ErrorMessage</MudText>
                    </MudAlert>
                }
                else if (Result.Status == "completed" && !string.IsNullOrEmpty(Result.ResultsUrl))
                {
                    <MudStack Row Spacing="2" Class="mt-3">
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Primary" 
                                 StartIcon="@Icons.Material.Filled.Visibility"
                                 OnClick="ViewResults"
                                 Disabled="@isLoadingResults">
                            @if (isLoadingResults)
                            {
                                <MudProgressCircular Size="@Size.Small" Indeterminate="true" />
                                <span class="ml-2">Loading...</span>
                            }
                            else
                            {
                                @(hasLoadedResults ? "Refresh Data" : "View Results")
                            }
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                 Color="Color.Primary" 
                                 StartIcon="@Icons.Material.Filled.Download"
                                 OnClick="DownloadResults"
                                 Disabled="@(!hasLoadedResults)">
                            Download Data
                        </MudButton>
                    </MudStack>
                }

                @* Show actual series data when loaded (artifact-first pattern) *@
                @if (simulationData != null)
                {
                    <MudExpansionPanels Class="mt-3">
                        <MudExpansionPanel>
                            <TitleContent>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.BarChart" class="mr-3" />
                                    <MudText Typo="Typo.subtitle2">Time Series Data (@simulationData.Series.Count series, @simulationData.Bins bins)</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudSimpleTable Striped="true" Dense="true">
                                    <thead>
                                        <tr>
                                            <th>Series ID</th>
                                            <th>Min</th>
                                            <th>Max</th>
                                            <th>Average</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var series in simulationData.Series)
                                        {
                                            <tr>
                                                <td><strong>@series.Key</strong></td>
                                                <td>@series.Value.Min().ToString("F2")</td>
                                                <td>@series.Value.Max().ToString("F2")</td>
                                                <td>@series.Value.Average().ToString("F2")</td>
                                                <td>@series.Value.Sum().ToString("F2")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </MudSimpleTable>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                }

                @* Show minimal metadata (artifact-first - metadata is not authoritative) *@
                @if (Result.Metadata.Any())
                {
                    <MudExpansionPanels Class="mt-3">
                        <MudExpansionPanel>
                            <TitleContent>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3" />
                                    <MudText Typo="Typo.subtitle2">Run Metadata</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudAlert Severity="Severity.Info" Class="mb-2">
                                    <MudText Typo="Typo.caption">
                                        Metadata shown here is not authoritative. Actual series data is loaded from artifacts above.
                                    </MudText>
                                </MudAlert>
                                <MudSimpleTable Striped="true" Dense="true">
                                    <tbody>
                                        @foreach (var item in Result.Metadata.Where(m => IsDisplayableMetadata(m.Key)))
                                        {
                                            <tr>
                                                <td><strong>@item.Key</strong></td>
                                                <td>@FormatMetadataValue(item.Value)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </MudSimpleTable>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                }
            </MudCardContent>
        </MudCard>
    }
</MudStack>

@code {
    [Parameter] public SimulationRunResult? Result { get; set; }
    [Parameter] public EventCallback OnViewResults { get; set; }
    [Parameter] public EventCallback OnDownloadResults { get; set; }

    private bool isLoadingResults;
    private bool hasLoadedResults;
    private SimResultData? simulationData;

    private Color GetStatusColor(string status)
    {
        return status.ToLowerInvariant() switch
        {
            "completed" => Color.Success,
            "failed" => Color.Error,
            "running" => Color.Warning,
            "pending" => Color.Info,
            _ => Color.Default
        };
    }

    private async Task ViewResults()
    {
        if (Result?.RunId == null)
            return;

        isLoadingResults = true;
        StateHasChanged();

        try
        {
            // Load results using artifact-first pattern
            var result = await SimResults.GetSimulationResultsAsync(Result.RunId);
            
            if (result.Success && result.Value != null)
            {
                simulationData = result.Value;
                hasLoadedResults = true;
                Snackbar.Add($"Loaded {simulationData.Series.Count} series from simulation artifacts", Severity.Success);
                
                // Also trigger the parent callback
                await OnViewResults.InvokeAsync();
            }
            else
            {
                Snackbar.Add($"Failed to load simulation data: {result.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading simulation results: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingResults = false;
            StateHasChanged();
        }
    }

    private async Task DownloadResults()
    {
        if (Result?.ResultsUrl != null && hasLoadedResults)
        {
            // Trigger download through parent callback
            await OnDownloadResults.InvokeAsync();
            
            // Note: Actual CSV download would be implemented by opening the artifact URLs
            // e.g., /sim/runs/{runId}/series/{seriesId} for each series
            Snackbar.Add("Download functionality will open artifact URLs for each series", Severity.Info);
        }
    }

    private string FormatMetadataValue(object value)
    {
        return value switch
        {
            Dictionary<string, object> dict => string.Join(", ", dict.Select(kvp => $"{kvp.Key}: {kvp.Value}")),
            IEnumerable<object> list => string.Join(", ", list),
            _ => value.ToString() ?? string.Empty
        };
    }

    private static bool IsDisplayableMetadata(string key)
    {
        // Only show basic metadata - artifacts are authoritative for actual data
        return key is "templateId" or "catalogId" or "source" or "schemaVersion";
    }

    protected override void OnParametersSet()
    {
        // Reset state when Result changes
        if (Result?.RunId != simulationData?.GetHashCode().ToString())
        {
            hasLoadedResults = false;
            simulationData = null;
        }
    }
}
