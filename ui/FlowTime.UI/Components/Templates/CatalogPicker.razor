@using FlowTime.UI.Services
@using MudBlazor
@inject ICatalogService CatalogService
@inject INotificationService NotificationService
@inject FeatureFlagService FeatureFlags
@implements IDisposable

<MudGrid Spacing="3" Justify="Justify.FlexStart">
    @if (catalogs == null)
    {
        <MudItem xs="12">
            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                <MudText Typo="Typo.body2">Loading catalogs...</MudText>
            </MudStack>
        </MudItem>
    }
    else if (!catalogs.Any())
    {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                No catalogs available
            </MudAlert>
        </MudItem>
    }
    else
    {
        @foreach (var catalog in catalogs)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                @RenderCatalogCard()(catalog)
            </MudItem>
        }
    }
</MudGrid>

@code {
    [Parameter] public EventCallback<CatalogInfo> OnCatalogSelected { get; set; }
    [Parameter] public CatalogInfo? SelectedCatalog { get; set; }
    
    private List<CatalogInfo>? catalogs;
    private CatalogInfo? selectedCatalog;

    protected override async Task OnInitializedAsync()
    {
        FeatureFlags.Changed += OnModeChanged;
        await LoadCatalogsAsync();
    }

    protected override void OnParametersSet()
    {
        // Sync selectedCatalog with SelectedCatalog parameter
        selectedCatalog = SelectedCatalog;
    }

    private async void OnModeChanged()
    {
        await LoadCatalogsAsync();
        selectedCatalog = null;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadCatalogsAsync()
    {
        try
        {
            await FeatureFlags.EnsureLoadedAsync();
            catalogs = await CatalogService.GetCatalogsAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Add($"Failed to load catalogs: {ex.Message}", Severity.Error);
        }
    }

    private async Task SelectCatalog(CatalogInfo catalog)
    {
        selectedCatalog = catalog;
        await OnCatalogSelected.InvokeAsync(catalog);
        StateHasChanged();
    }

    private string GetCardClass(CatalogInfo catalog)
    {
        var isSelected = selectedCatalog?.Id == catalog.Id;
        return isSelected ? "mud-elevation-8 catalog-card-selected" : "mud-elevation-2 catalog-card";
    }

    private Color GetTypeColor(string type) => type?.ToLowerInvariant() switch
    {
        "production" => Color.Primary,
        "demo" => Color.Secondary,
        "test" => Color.Info,
        _ => Color.Default
    };

    private RenderFragment<CatalogInfo> RenderCatalogCard() => catalog =>
        @<MudCard Class="@GetCardClass(catalog)" 
                 Style="cursor: pointer; height: 100%;" 
                 onclick="@(() => SelectCatalog(catalog))">
            <MudCardContent>
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Class="mb-2">
                    <MudText Typo="Typo.h6">@catalog.Name</MudText>
                    <MudChip T="string" Size="Size.Small" Color="@GetTypeColor(catalog.Type)">
                        @catalog.Type
                    </MudChip>
                </MudStack>
                <MudText Typo="Typo.body2" Class="mb-2">@catalog.Description</MudText>
                <MudStack Row Spacing="1" Class="mb-2">
                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.AccountTree" Variant="Variant.Outlined">
                        @catalog.NodeCount nodes
                    </MudChip>
                </MudStack>
                @if (catalog.Capabilities.Any())
                {
                    <div class="mt-2">
                        @foreach (var capability in catalog.Capabilities.Take(3))
                        {
                            <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Class="mr-1 mb-1">
                                @capability
                            </MudChip>
                        }
                        @if (catalog.Capabilities.Count > 3)
                        {
                            <MudChip T="string" Size="Size.Small" Variant="Variant.Text" Color="Color.Secondary" Class="mr-1">
                                +@(catalog.Capabilities.Count - 3) more
                            </MudChip>
                        }
                    </div>
                }
            </MudCardContent>
        </MudCard>;

    public void Dispose()
    {
        FeatureFlags.Changed -= OnModeChanged;
    }
}
